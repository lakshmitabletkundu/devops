trigger: none
#- feature_docker

stages:
- stage: Build
  jobs:
  - job: Build
    pool:
      vmImage: 'ubuntu-latest'
    steps:
    - bash: |
        echo "Print folder path"
        tree $(Agent.WorkFolder)/1 /f

        echo "System.DefaultWorkingDirectory"
        echo "$(System.DefaultWorkingDirectory)"

        echo "Build.SourcesDirectory"
        echo "$(Build.SourcesDirectory)"

        echo "Build.ArtifactStagingDirectory"
        echo "$(Build.ArtifactStagingDirectory)"

        echo "Build.BinariesDirectory"
        echo "$(Build.BinariesDirectory)"

        echo "Build.Local.Repository"
        echo "$(Build.Local.Repository)"

    - task: TerraformInstaller@1
      inputs:
        terraformVersion: 'latest'

    - task: TerraformTaskV4@4
      displayName: Tf Init
      inputs:
        provider: 'azurerm'
        command: 'init'
        backendServiceArm: 'mysc1'
        backendAzureRmResourceGroupName: 'rg_storage_acc'
        backendAzureRmStorageAccountName: 'storageacclakshmi'
        backendAzureRmContainerName: 'tfstate'
        backendAzureRmKey: 'dev.terraform.state'
        workingDirectory: '$(System.DefaultWorkingDirectory)/terraform'

    - task: TerraformTaskV4@4
      displayName: Tf Validate
      inputs:
        provider: 'azurerm'
        command: 'validate'
        workingDirectory: '$(System.DefaultWorkingDirectory)/terraform'

    - task: TerraformTaskV4@4
      displayName: Tf Format
      inputs:
        provider: 'azurerm'
        command: 'custom'
        outputTo: 'console'
        customCommand: 'fmt'
        environmentServiceNameAzureRM: 'mysc1'

    - task: TerraformTaskV4@4
      displayName: Tf Plan
      inputs:
        provider: 'azurerm'
        command: 'plan'
        workingDirectory: '$(System.DefaultWorkingDirectory)/terraform'
        commandOptions: '-input=false -out $(Build.SourcesDirectory)/tfplan'
        environmentServiceNameAzureRM: 'mysc1'

    - task: ArchiveFiles@2
      displayName: archive 
      inputs:
        rootFolderOrFile: '$(Build.SourcesDirectory)/terraform'
        includeRootFolder: false
        archiveType: 'zip'
        archiveFile: '$(Build.ArtifactStagingDirectory)/$(Build.BuildId).zip'
        replaceExistingArchive: true

    - task: PublishBuildArtifacts@1
      displayName: Publish archived File 
      inputs:
        PathtoPublish: '$(Build.ArtifactStagingDirectory)'
        ArtifactName: '$(Build.Buildid)-build'
        publishLocation: 'Container'